package Part02_Array;

/**Array数组；
 * 概念：一种可以同时存放多个数据值的容器；
 * 特点：1. 一种引用数据类型
 *      2. 数组中的多个数据，类型必须统一
 *      3. 数组的长度在程序运行期间不可改变
 *
 *数组的初始化：在内存中创建一个数组，并且向其中赋予一些默认值；
 * 1. 动态初始化（指定长度）
 * 2. 静态初始化（指定内容）
 *
 * 动态初始化数组的格式：
 * 数据类型[] 数组名称 = new 数据类型[数组长度]；
 * PS：[]代表是一个数组，左右数据类型一致
 *
 * 静态初始化
 * 数据类型[] 数组名称 = new 数据类型{元素1， 元素2， ...}；
 *
 * 省略格式的静态初始化；
 * 数据类型[] 数组名称 = {元素1，元素2， ...}
 *
 * 注意事项：
 * 1. 静态初始化没有直接指定长度，但仍然会自动推算得到长度
 * 2. 静态初始化标准格式可以拆分成两个步骤
 * 3. 动态初始化也可以拆分成两个步骤
 * 4. 静态初始化一旦使用省略格式，就不能分为两个步骤
 *
 * 使用建议：
 * 如果不确定数组中的具体内容，用动态初始化；否则已经确定，则使用静态初始化
 *
 * 常见问题：
 * 1. 数组的越界异常,即索引值所指元素超出了数组长度：java.lang.ArrayIndexOutOfBoundsException
 * 2. 空指针异常，即引用类型变量被赋值null，此时只有进行new初始化才能使用其中的元素
 *    否则就会出现空指针异常：java.lang.NullPointerException
 */

public class demo01Array {
    public static void main(String[] args) {
        int [] arrayA = {1,2,3};
        System.out.println("Array数组举例：省略格式的静态初始化" );
    }


}
