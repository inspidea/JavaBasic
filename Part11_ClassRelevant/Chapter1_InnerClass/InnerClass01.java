package Part11_ClassRelevant.Chapter1_InnerClass;

/**
 * 如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类；
 * 例如：汽车和发动机的关系，身体和心脏的关系；
 *
 * 分类：
 * 1. 成员内部类；
 * 2. 局部内部类（包含匿名内部类）；
 *
 * ===============================================
 *
 * 1. 成员内部类定义格式：
 *    修饰符 class 类名称 {
 *        修饰符 class 类名称{
 *            // ...
 *        }
 *        // ...
 *    }
 *    内用外随意访问，外用内，需要内部类对象才能使用；
 *
 * 使用成员内部类的两种方式：
 * 1. 间接：在外部类的方法中，使用内部类，然后main方法只是调用外部类的方法；
 * 2. 直接：公式：
 *         外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称()
 *         公式的规律是：外.内 内对象 = new 外().new 内()
 *
 * ===============================================
 *
 * 2. 局部内部类：
 *    如果一个类是定义在一个方法内部的，那么这就是一个局部内部类
 *    “局部”：指的是只有当前所述方法才能使用它，出了这个方法就不能使用
 *
 *    定义格式：
 *    修饰符 class 外部类名称 {
 *        修饰符 返回值类型 外部类方法名称(参数列表) {
 *            class 局部内部类名称 {
 *                // ... （区别：局部内部类在方法内，成员内部类在方法外）
 *            }
 *        }
 *    }
 *
 * =================================================
 *
 * 类的权限修饰符小结：
 *     public > protected > (default) > private
 *     定义一个类的时候，权限修饰符规则：
 *     1. 外部类： public / （default)
 *     2. 成员内部类： public / protected / （default) / private
 *     3. 局部内部类： 不允许有修饰符
 *
 *
 * 备注：内部类生成的class文件，文件名中通常带有一个 $ 符号，因此为文件命名时应避免使用该符号
 */

public class InnerClass01 {
    public static void main(String[] args) {
        Body body = new Body();   //外部类的对象
        //通过外部类的对象，调用外部类的方法，里面间接在使用内部类的Heart；
        body.methodBody();

        System.out.println("==============");

        //按照公式写(直接创建内部对象，不用借助外部方法)
        Body.Heart heart = new Body().new Heart();
        heart.beat();
    }

}
