package Part06_abstract;

/**
 * 抽象方法：加上abstract关键字，去掉大括号，直接分号结束；
 * 抽象类：抽象方法所在的类必须是抽象类；
 *
 * 如何使用抽象类和抽象方法：
 * 1. 不能直接创建new抽象类对象；
 * 2. 必须用一个子类来继承抽象父类
 * 3. 这个子类必须覆盖重写抽象父类中的所有抽象方法；
 * 覆盖重写(实现)；子类去掉抽象方法的abstract关键字，然后补上方法体大括号；
 * 4. 创建子类对象进行使用；
 *
 * 抽象方法和抽象类的注意事项：
 * 1. 抽象类不能创建对象，只能创建非抽象子类的对象（抽象方法没有具体的方法体，无意义）；
 * 2. 抽象类中可以有构造方法，是供子类创建对象时，初始化父类成员使用的；
 *   （子类构造方法中有默认的super()，需要访问父类构造方法）；
 * 3. 抽象类中，不一定包含抽象方法，但含有抽象方法的类必定是抽象类；
 *   （未包含抽象方法的抽象类，目的就是不让调用者创建该类对象，通常用于特殊类的结构设计）；
 * 4. 抽象类的子类，必须重写抽象父类中的【所有的】抽象方法，否则无法通过编译，【除非该子类也是抽象类】；
 *   （假设不重写所有抽象方法，则类中包含抽象方法，创建对象后调用抽象方法没有意义）；
 *
 */

public abstract class Animal {

    public Animal(){
        System.out.println("抽象父类构造方法执行");
    }

    //这是一个抽象方法，代表吃东西，具体吃什么（大括号中的内容）不确定。
    public abstract void eat();

    //这是一个普通成员方法;
//    public void normalMethod{
//
//    }
}
