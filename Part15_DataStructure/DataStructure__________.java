package Part15_DataStructure;

/**
 * Data Structure 数据结构  ----------------------------------------重点知识点!!!
 *
 * 【Stack 栈】：
 * 特点：先进后出，出口入口为同一个，位于顶部，如：子弹弹夹；
 * （图示：Stack.jpg);
 *
 * 【Queue 队列】；
 * 特点：先进先出，出口入口不同，分别在左右两侧，如：排队安检；
 * （图示：Queue.jpg);
 *
 * 【Array 数组】：
 * 特点：
 * 1. 查询快：数组的地址是连续的，我们通过数组的首地址可以找到数组，通过数组的索引可以快速查找某一个元素；
 * 2. 增删慢：数组的长度是固定的，我们想要增加/删除一个元素，必须创建一个新数组，把原数组的数组进行复制；
 *    删除元素时，要创建一个长度为原数组长度-1（Array.length-1)的数组，把其他数据复制过来并删除原数组；
 * (图示：Array.jpg）
 *
 * 【LinkedList 链表】：
 * 特点：
 * 1. 查询慢：链表中地址不是连续的，每次查询元素，都必须从头开始查询；
 * 2. 增删快：链表结构，增加/删除一个元素，对链表的整体结构没有影响；
 *
 * 单项列表：链表中只有一条链，不能保证元素的顺序（存储元素和取出元素的顺序可能不一致）；
 * (图示：SingleLinkedList.jpg）
 * 双向链表：链表中有两条链子，其中一条是专门记录元素的顺序的，是一个有序的集合；
 * (图示：DoubleLinkedList.jpg）
 *
 * 链表中的每一个元素也称之为一个【节点Node】，一个节点包含了【1个数据元】和【2个指针域(存储地址)】；
 * 分别代表了：自身的数据，自身的地址和下一个(Next)节点的地址
 *
 *  【Tree 树 (Computer)】：
 *  （图示：Tree.jpg)
 * 【BinaryTree 二叉树】；
 *  二叉树是红黑树的一种特殊形式；
 *  二叉树的每个节点向下的分支不能超过两个；
 *
 * 【Binary Sort Tree 二叉排序树/Binary Search Tree 二叉查找树】；
 *  在二叉树的基础上，元素是有大小顺序的，左子树小，右子树大；
 *  例如：猜数字游戏，1-100之间的数字，从50开始猜（比大小），每次减去一半剩余数字；
 *
 * 【Balanced Binary Tree 平衡二叉树（AVL树）】
 *  一棵AVL树是其每个结点的左子树和右子树的高度最多相差1的二叉查找树(空树的高度为-1)，这个差值也称为平衡因子
 *  （图示：BalancedTree。jpg)
 *
 *  【Red-BlackTree 红黑树】：
 *   特点：趋近于平衡树，查询的速度非常快，查询叶子结点的最大次数和最小次数比值不能超过两倍；
 *   约束：
 *   1. 节点可以是红色的或黑色的；
 *   2. 根节点是黑色的；
 *   3. 叶子节点(空节点)是黑色的；
 *   4. 每个红色的结点的子节点都是黑色的；
 *   5. 任意一个节点到其每一个叶子节点的所有路径上黑色节点数量相同；
 *   （图示：Red-BlackTree.jpg)
 *
 *
 *
 */

public class DataStructure__________ {
}
